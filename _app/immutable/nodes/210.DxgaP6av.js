import{t as pa,a as ca}from"../chunks/B6gcMpOX.js";import"../chunks/Bf2R1Ror.js";import{f as ha,c as a,s as e,r as o,n as va}from"../chunks/JuJzXV1W.js";import{l as ua,s as Sa}from"../chunks/CmS9MtAn.js";import{L as wa}from"../chunks/DBBBgC9B.js";import{T as t}from"../chunks/Cgyabsre.js";const tt={title:"What to expect from daisyUI 5?",desc:"An overview of of daisyUI 5 upcoming changes and features",published:!0,date:"2024-07-02T00:00:00.000Z",author:"Pouya Saadeghi",thumbnail:"https://img.daisyui.com/images/blog/daisyui-5-flowers.webp",tags:["News"]},{title:Ia,desc:Ta,published:Ua,date:ka,author:Pa,thumbnail:za,tags:Aa}=tt;var ma=pa('<p><!></p> <h1 id="compatibility-with-tailwind-css-4"><span data-heading-text="Compatibility with Tailwind CSS 4"><!></span></h1> <p><!><a href="https://tailwindcss.com/blog/tailwindcss-v4-alpha" rel="nofollow" target="_blank">official announcement</a><!></p> <ul><li><!></li> <li><!><code>@layer</code><!><code>@property</code><!><code>color-mix()</code><!><code>@starting-style</code><!></li> <li><!></li> <li><!><code>tailwind.config.js</code><!></li> <li><!></li></ul> <p><!><a href="https://tailwindcss.com/blog/tailwindcss-v4-alpha" rel="nofollow" target="_blank">Tailwind CSS blog</a></p> <h1 id="upcoming-tailwind-css-4-plugins-api"><span data-heading-text="Upcoming Tailwind CSS 4 plugins API"><!></span></h1> <p><!></p> <p><!></p> <p><img src="https://img.daisyui.com/images/blog/tailwind-css-4-plugins-api-syntax-tweet.webp" alt="tailwind css 4 plugins api syntax tweet"></p> <p><!></p> <blockquote class="alert not-italic items-start text-xs leading-loose *:m-0!"><p><!> <!> <!><code>lg:</code><!> <!></p></blockquote> <h1 id="no-js-config"><span data-heading-text="No JS config"><!></span></h1> <p><img src="https://img.daisyui.com/images/blog/rip-tailwind-config-js.webp" alt="Tailwind CSS 4 config"></p> <p><!></p> <p><!><code>@import</code><!></p> <h1 id="pure-css-files-for-each-component-and-each-theme"><span data-heading-text="Pure CSS files for each component and each theme"><!></span></h1> <p><!> <!></p> <h1 id="native-css-nesting"><span data-heading-text="Native CSS nesting"><!></span></h1> <p><!></p> <p><!></p> <h1 id="no-forced-color-format-conversion"><span data-heading-text="No forced color format conversion"><!></span></h1> <p><!><code>color-mix()</code><!> <!></p> <p><!><code>*-content</code><!></p> <ul><li><!></li> <li><!><code>color-contrast()</code><!><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-contrast" rel="nofollow" target="_blank">not supported in browsers</a><!></li> <li><!><code>color-contrast()</code><!><a href="https://github.com/parcel-bundler/lightningcss/issues/99" rel="nofollow" target="_blank">not supported in Lightning CSS</a><!></li></ul> <h1 id="less-or-zero-dependencies"><span data-heading-text="Less (or zero?) dependencies"><!></span></h1> <p><!></p> <ul><li><code>postcss-js</code><!></li> <li><code>culori</code><!></li> <li><code>picocolors</code><!></li> <li><code>css-selector-tokenizer</code><!></li></ul> <p><!> <!></p> <h1 id="container-queries-for-responsive-components"><span data-heading-text="Container queries for responsive components"><!></span></h1> <p><!></p> <h1 id="css-popover-api-and-anchor-positioning"><span data-heading-text="CSS Popover API and anchor positioning"><!></span></h1> <p><img src="https://img.daisyui.com/images/blog/daisyui-5-dropdown-popover.webp" alt="daisyUI 5 dropdown popover API"></p> <p><!><code>:focus</code><!><code>&lt;details&gt;</code><!> <!><a href="https://developer.mozilla.org/en-US/docs/Web/API/Popover_API" rel="nofollow" target="_blank">popover API</a><!><a href="https://caniuse.com/mdn-api_htmlelement_popover" rel="nofollow" target="_blank">supported in all modern browsers</a><!><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_anchor_positioning" rel="nofollow" target="_blank">CSS anchor positioning</a><!></p> <h1 id="design-improvements"><span data-heading-text="Design improvements"><!></span></h1> <p><!></p> <h1 id="new-components"><span data-heading-text="New components"><!></span></h1> <p><!></p> <h1 id="themes"><span data-heading-text="Themes"><!></span></h1> <p><!></p> <p><!></p> <h1 id="smaller-css-size"><span data-heading-text="Smaller CSS size"><!></span></h1> <p><img src="https://img.daisyui.com/images/blog/css-file-size-daisyui-5.webp" alt="Reduce Tailwind CSS file size"></p> <p><!></p> <h1 id="customizable-sizing-for-components"><span data-heading-text="Customizable sizing for components"><!></span></h1> <p><!></p> <p><!></p> <h1 id="backward-compatibility"><span data-heading-text="Backward compatibility"><!></span></h1> <p><!></p> <p><!></p> <p><!></p> <h1 id="conclusion"><span data-heading-text="Conclusion"><!></span></h1> <p><!></p> <p><!></p>',1);function Na(at,ot){const it=ua(ot,["children","$$slots","$$events","$$legacy"]);wa(at,Sa(()=>it,tt,{children:(nt,_a)=>{var re=ma(),i=ha(re),st=a(i);t(st,{text:"daisyUI 5 is in development and it will be released after Tailwind CSS 4 is released. Here's what you can expect from daisyUI 5 and how it will be different from the current version."}),o(i);var n=e(i,2),le=a(n),rt=a(le);t(rt,{text:"Compatibility with Tailwind CSS 4"}),o(le),o(n);var s=e(n,2),de=a(s);t(de,{text:"Tailwind CSS 4 is in development and I can't wait for it to be released. You can read the"});var lt=e(de,2);t(lt,{text:"on the Tailwind CSS blog, but here are some of the highlights:"}),o(s);var r=e(s,2),l=a(r),dt=a(l);t(dt,{text:"New engine which is faster, smaller and more efficient"}),o(l);var d=e(l,2),pe=a(d);t(pe,{text:"Tailwind CSS 4 will use modern CSS features like"});var ce=e(pe,2);t(ce,{text:","});var he=e(ce,2);t(he,{text:","});var ve=e(he,2);t(ve,{text:","});var pt=e(ve,2);t(pt,{text:", anchor positioning, container queries, and more"}),o(d);var p=e(d,2),ct=a(p);t(ct,{text:"Automatic content detection: No need for listing all your markup files in a config file. Tailwind CSS will automatically detect the class names in all your markup files and generate the necessary CSS."}),o(p);var c=e(p,2),ue=a(c);t(ue,{text:"No need for"});var ht=e(ue,2);t(ht,{text:"file. Everything will be done directly in the CSS file."}),o(c);var Se=e(c,2),vt=a(Se);t(vt,{text:"Tailwind CSS 4 will use CSS variables for colors and all other tokens."}),o(Se),o(r);var h=e(r,2),ut=a(h);t(ut,{text:"Read more at"}),va(),o(h);var v=e(h,2),we=a(v),St=a(we);t(St,{text:"Upcoming Tailwind CSS 4 plugins API"}),o(we),o(v);var u=e(v,2),wt=a(u);t(wt,{text:"Plugins API for Tailwind CSS 4 is still in development. Currently it's not possible to use daisyUI with the alpha version of Tailwind CSS 4, but as soon as the new API is released, we will update daisyUI to be compatible with it."}),o(u);var S=e(u,2),mt=a(S);t(mt,{text:"Plugins in Tailwind CSS 3 and below were expected to be CSS-in-JS. But it is expected to be pure CSS files in Tailwind CSS 4."}),o(S);var w=e(S,4),_t=a(w);t(_t,{text:"This will make it easier to use daisyUI as a plugin in your Tailwind CSS project, and it will also make it easier for us to maintain and update daisyUI since it will be a pure CSS file, without any build process to convert CSS to CSS-in-JS."}),o(w);var m=e(w,2),me=a(m),_e=a(me);t(_e,{text:"With the current alpha version of Tailwind CSS 4, technically you can import the whole CSS file of daisyUI in your project but it won't act as a Tailwind CSS plugin."});var ge=e(_e,2);t(ge,{text:"Which means it will include all unused class names in your production CSS file."});var fe=e(ge,2);t(fe,{text:"And you won't be able to use Tailwind CSS responsive prefixes like"});var be=e(fe,2);t(be,{text:"with daisyUI class names. Because of this, it's important to use daisyUI as a Tailwind CSS plugin."});var gt=e(be,2);t(gt,{text:"So let's wait for the new Tailwind CSS 4 plugins API to be released."}),o(me),o(m);var _=e(m,2),xe=a(_),ft=a(xe);t(ft,{text:"No JS config"}),o(xe),o(_);var g=e(_,4),bt=a(g);t(bt,{text:"If Tailwind CSS 4 is going to allow importing CSS files as plugins, we won't need a JS config file for daisyUI. Everything will be done in the CSS file."}),o(g);var f=e(g,2),ye=a(f);t(ye,{text:"You will be able to include the daisyUI CSS file as a Tailwind CSS plugin using the CSS"});var xt=e(ye,2);t(xt,{text:"rule."}),o(f);var b=e(f,2),Ce=a(b),yt=a(Ce);t(yt,{text:"Pure CSS files for each component and each theme"}),o(Ce),o(b);var x=e(b,2),Ie=a(x);t(Ie,{text:"Previously, daisyUI was using a build process to convert the CSS files to CSS-in-JS. But with the upcoming Tailwind CSS 4 plugins API, we will be able to include pure CSS files for each component and each theme in the daisyUI source code."});var Ct=e(Ie,2);t(Ct,{text:"This will make it possible to use specific components of daisyUI in your project without including the whole CSS file."}),o(x);var y=e(x,2),Te=a(y),It=a(Te);t(It,{text:"Native CSS nesting"}),o(Te),o(y);var C=e(y,2),Tt=a(C);t(Tt,{text:"Native CSS nesting is now supported in all modern browsers."}),o(C);var I=e(C,2),Ut=a(I);t(Ut,{text:"Instead of using Post CSS nesting, we will use native CSS nesting in the upcoming version of daisyUI. This will reduce the size of the CSS files dramatically."}),o(I);var T=e(I,2),Ue=a(T),kt=a(Ue);t(kt,{text:"No forced color format conversion"}),o(Ue),o(T);var U=e(T,2),ke=a(U);t(ke,{text:"Colors in Tailwind CSS 4 will be defined as CSS variables and Tailwind CSS will use CSS"});var Pe=e(ke,2);t(Pe,{text:"function to change the opacity of the colors. This means we won't need to convert the colors to a specific format to be used in Tailwind CSS."});var Pt=e(Pe,2);t(Pt,{text:"daisyUI built-in themes will keep using OKLCH color format as it is currently the most ergonomic P3 color format, but you can use any color format for your custom themes and we won't convert them to OKLCH in the production CSS file just to be compatible with Tailwind CSS opacity utilities."}),o(U);var k=e(U,2),ze=a(k);t(ze,{text:"A challenge for daisyUI 5 will be to generate the optional colors (like"});var zt=e(ze,2);t(zt,{text:") as before because:"}),o(k);var P=e(k,2),z=a(P),At=a(z);t(At,{text:"We're not going to process the color values using JS in the build time if we're not going to use pure CSS files"}),o(z);var A=e(z,2),Ae=a(A);t(Ae,{text:"CSS"});var Ne=e(Ae,2);t(Ne,{text:"function is"});var Nt=e(Ne,2);t(Nt,{text:"yet"}),o(A);var je=e(A,2),$e=a(je);t($e,{text:"CSS"});var Je=e($e,2);t(Je,{text:"function is"});var jt=e(Je,2);t(jt,{text:"(The CSS parser used by Tailwind CSS 4) yet."}),o(je),o(P);var N=e(P,2),We=a(N),$t=a(We);t($t,{text:"Less (or zero?) dependencies"}),o(We),o(N);var j=e(N,2),Jt=a(j);t(Jt,{text:"daisyUI currently uses 4 dependencies:"}),o(j);var $=e(j,2),J=a($),Wt=e(a(J));t(Wt,{text:"to convert CSS to CSS-in-JS because Tailwind CSS 3 and below only accept CSS-in-JS syntax as plugins"}),o(J);var W=e(J,2),qt=e(a(W));t(qt,{text:"to convert colors"}),o(W);var q=e(W,2),Lt=e(a(q));t(Lt,{text:"for console colors"}),o(q);var qe=e(q,2),Bt=e(a(qe));t(Bt,{text:"for adding prefixes"}),o(qe),o($);var L=e($,2),Le=a(L);t(Le,{text:"If daisyUI package is going to include pure CSS files only, we can safely remove all these dependencies."});var Ht=e(Le,2);t(Ht,{text:"I'm not still sure how we can add prefixes to the daisyUI class names if we're not going to process the styles using Post CSS, But I will find a way."}),o(L);var B=e(L,2),Be=a(B),Ot=a(Be);t(Ot,{text:"Container queries for responsive components"}),o(Be),o(B);var H=e(B,2),Rt=a(H);t(Rt,{text:"Container queries are now supported in all modern browsers. We will use them for components that need to be responsive based on their container width by default."}),o(H);var O=e(H,2),He=a(O),Yt=a(He);t(Yt,{text:"CSS Popover API and anchor positioning"}),o(He),o(O);var R=e(O,4),Oe=a(R);t(Oe,{text:"We've been using CSS"});var Re=e(Oe,2);t(Re,{text:"or"});var Ye=e(Re,2);t(Ye,{text:"element for dropdowns in daisyUI as they were the best no-JS options we had at the time. The problem with them is, without using JS there's no way to close a dropdown by both clicking outside OR clicking the button. You had to choose one."});var De=e(Ye,2);t(De,{text:"But now we have a new option: Native HTML"});var Ee=e(De,2);t(Ee,{text:"is now"});var Ke=e(Ee,2);t(Ke,{text:"and we will use it for dropdowns in daisyUI. There's also"});var Dt=e(Ke,2);t(Dt,{text:"which can help about the positioning of the dropdowns, preventing them from going out of the viewport."}),o(R);var Y=e(R,2),Me=a(Y),Et=a(Me);t(Et,{text:"Design improvements"}),o(Me),o(Y);var D=e(Y,2),Kt=a(D);t(Kt,{text:"Most components will have small design improvements. Not going to break your current design, but will make them all look better."}),o(D);var E=e(D,2),Ze=a(E),Mt=a(Ze);t(Mt,{text:"New components"}),o(Ze),o(E);var K=e(E,2),Zt=a(K);t(Zt,{text:"There will be new components in daisyUI 5. I will announce them when they are ready."}),o(K);var M=e(K,2),Fe=a(M),Ft=a(Fe);t(Ft,{text:"Themes"}),o(Fe),o(M);var Z=e(M,2),Gt=a(Z);t(Gt,{text:"daisyUI currently has 32 built-in themes. Probably we will have even more built-in themes in daisyUI 5."}),o(Z);var F=e(Z,2),Qt=a(F);t(Qt,{text:"And each of the existing themes will be a simple CSS file that you can include in your project (or you can include them all using one import rule). It feels good when everything is simple a CSS file, right?"}),o(F);var G=e(F,2),Ge=a(G),Vt=a(Ge);t(Vt,{text:"Smaller CSS size"}),o(Ge),o(G);var Q=e(G,4),Xt=a(Q);t(Xt,{text:"This year a lot of new CSS features got available in all modern browsers. And with the new Tailwind CSS 4 changes we will be able to make daisyUI styles simpler and the CSS files smaller."}),o(Q);var V=e(Q,2),Qe=a(V),ea=a(Qe);t(ea,{text:"Customizable sizing for components"}),o(Qe),o(V);var X=e(V,2),ta=a(X);t(ta,{text:"We will use CSS variables for the size value of component. This will make it easier to customize the size of all components in your project by changing a few CSS variables, instead of adding utility classes to each component."}),o(X);var ee=e(X,2),aa=a(ee);t(aa,{text:"This feature will give you more control over the size of the components and will make it even easier to have full control over the design of your project."}),o(ee);var te=e(ee,2),Ve=a(te),oa=a(Ve);t(oa,{text:"Backward compatibility"}),o(Ve),o(te);var ae=e(te,2),ia=a(ae);t(ia,{text:"daisyUI 5 will be compatible with Tailwind CSS 4 and all modern browsers."}),o(ae);var oe=e(ae,2),na=a(oe);t(na,{text:"daisyUI 4 will still be available for those who can't upgrade to Tailwind CSS 4 or if they want to support old browsers."}),o(oe);var ie=e(oe,2),sa=a(ie);t(sa,{text:"We will make sure that the upgrade process from daisyUI 4 to daisyUI 5 is as smooth as possible, and we will provide a migration guide."}),o(ie);var ne=e(ie,2),Xe=a(ne),ra=a(Xe);t(ra,{text:"Conclusion"}),o(Xe),o(ne);var se=e(ne,2),la=a(se);t(la,{text:"daisyUI 5 will be a major update, it will adapt to the new features of Tailwind CSS 4 and the new CSS features that are now available in all modern browsers. I'm excited for the release of Tailwind CSS 4 and I will make sure that daisyUI 5 is going to be ready as soon as possible after the release of Tailwind CSS 4."}),o(se);var et=e(se,2),da=a(et);t(da,{text:"Subscribe to the daisyUI newsletter to get notified about the updates."}),o(et),ca(nt,re)},$$slots:{default:!0}}))}export{Na as component};
